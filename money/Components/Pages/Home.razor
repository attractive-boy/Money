@page "/"
@inject DatabaseService DbService
@inject NavigationManager navigationManager

@inject IJSRuntime JS

<style>
    table {
        width: 100%;
        table-layout: fixed;
        border-collapse: collapse; /* 合并边框 */
    }
    th, td {
        text-align: left;
        padding: 8px;
        border: 1px solid #ddd; /* 添加边框 */
    }
    thead th {
        background-color: #f4f4f4; /* 为表头添加背景色 */
    }
    td input {
        width: 100%;
        box-sizing: border-box;
        border:none;
    }

    td {
        padding:0 !important;
    }
    td
</style>

<div style="display: flex; justify-content: space-between; width: 100%;">
    <table class="table" style="flex: 0 0 50%;">
        <thead>
            <tr>
                <th>用户名</th>
                <th style="width:50px">订单</th>
                <th>金额</th>
                <th>本次结算</th>
                <th>合计</th>
            </tr>
        </thead>
        <tbody>
            @{
                int index = 0;
            }
            @foreach (var item in userTotals)
            {
                if (index % 2 == 0)
                {
                            <tr>
                                <td>
                                            <input @bind="item.Username" @onblur="SaveDataOnBlur"  @ondblclick="@(() => DeleteRow(item))"/>
                                </td>
                                <td>
                                    <input @bind="item.Order" type="number" @onblur="SaveDataOnBlur" />
                                </td>
                                <td>
                                    <input @bind="item.Amount" type="number" @onblur="SaveDataOnBlur" />
                                </td>
                                        <td >
                                                    <input @bind="item.Settlement" type="number" @ondblclick="@(() => EnableEditing(item, 1))" readonly="@(!item.IsEditable1)"  @onblur="SaveDataOnBlur" />
                                </td>
                                        <td >
                                                    <input @bind="item.Total" type="number" readonly="@(!item.IsEditable2)" @ondblclick="@(() => EnableEditing(item, 2))"  @onblur="SaveDataOnBlur" />
                                </td>
                            </tr>
                }
                index++;
            }
        </tbody>
    </table>
    <table class="table" style="flex: 0 0 50%;">
        <thead>
            <tr>
                <th>用户名</th>
                <th style="width:50px">订单</th>
                <th>金额</th>
                <th>本次结算</th>
                <th>合计</th>
            </tr>
        </thead>
        <tbody>
            @{
                int index1 = 0;
            }
            @foreach (var item in userTotals)
            {
                if (index1 % 2 != 0)
                {
                            <tr>
                                <td>
                                            <input @bind="item.Username" @onblur="SaveDataOnBlur" @ondblclick="@(() => DeleteRow(item))" />
                                </td>
                                <td>
                                    <input @bind="item.Order" type="number" @onblur="SaveDataOnBlur" />
                                </td>
                                <td>
                                    <input @bind="item.Amount" type="number" @onblur="SaveDataOnBlur" />
                                </td>
                                <td >
                                                            <input @ondblclick="@(() => EnableEditing(item, 1))" @bind="item.Settlement" type="number" readonly="@(!item.IsEditable1)"  @onblur="SaveDataOnBlur" />
                                </td>
                                         <td >  
                                                                            <input @ondblclick="@(() => EnableEditing(item, 2))" @bind="item.Total" type="number" readonly="@(!item.IsEditable2)" @onblur="SaveDataOnBlur" />
                                </td>
                            </tr>
                }
                index1++;
            }
        </tbody>
    </table>
</div>

<button @onclick="AddNewRow">新增一行</button>
<button @onclick="Start">开始</button>
<button @onclick="SaveData">结束</button>
<input style="width:50px" @bind="SettlementControl" type="number" @onblur="SaveDataOnBlur" />
<div>
    <table style="margin-top:10px">
        <tbody>
            <tr>
                <td>1、3、5总和</td>
                <td>@ALL135</td>
                <td>2、4、6总和</td>
                <td>@ALL246</td>
                <td>两者相差数</td>
                <td>@Difference</td>
                <td>总计</td>
                <td>@ALL</td>
            </tr>
        </tbody>
    </table>
</div>

@code {
    private List<UserTotal> userTotals = new List<UserTotal>();
    private decimal ALL135 = 0;
    private decimal ALL246 = 0;
    private decimal Difference = 0;
    private decimal ALL = 0;
    private string SettlementControl = string.Empty;
    private bool IsOnblur = false;
    private bool canEnd = true;

    private void EnableEditing(UserTotal item, int flag)
    {
        Console.WriteLine($"EnableEditing");

        switch (flag)
        {
            case 1:
                item.IsEditable1 = true;
                break;
            case 2:
                item.IsEditable2 = true;
                break;
        }
        StateHasChanged(); // 强制组件重新渲染
    }

    protected override async Task OnInitializedAsync()
    {
        userTotals = await DbService.GetUserTotalsAsync();
        // 不足二十条补足到20
        while (userTotals.Count < 20)
        {
            userTotals.Add(new UserTotal
                {
                    Username = string.Empty,
                    Order = string.Empty,
                    Amount = string.Empty,
                    Settlement = string.Empty,
                    Total = 0
                });
        }
        await SaveDataOnBlur(null);
    }

    private void Start()
    {
        foreach (var item in userTotals)
        {
            item.Order = string.Empty;
            item.Amount = string.Empty;
            item.Settlement = string.Empty;
        }
        SettlementControl = string.Empty;
        canEnd = true;
    }

    private async Task SaveData()
    {
        if (!canEnd) return;
        var modificationRecords = new List<ModificationRecord>();
        /* 等待按钮执行完成后 */
        IsOnblur = true;
        try
        {
            foreach (var item in userTotals)
            {
                decimal settlement = 0;
                if (decimal.TryParse(item.Settlement, out settlement))
                {
                    item.Total += settlement;
                    // 使用 TryParse 尝试解析 Amount 和 Settlement，如果解析失败，设置为 0
                    decimal amount;
                    if (!decimal.TryParse(item.Amount, out amount))
                    {
                        amount = 0;
                    }

                    /* var modificationRecord = new ModificationRecord
                            {
                            Username = item.Username,
                            Order = item.Order.ToString(),
                            Amount = amount,
                            Settlement = decimal.Parse(item.Settlement)
                    };

                    modificationRecords.Add(modificationRecord); */
                }
            }
        }catch (Exception e)
        {

        }

        SaveDataOnBlur(null);
        IsOnblur = false;
        canEnd = false;
    }

    private async Task SaveDataOnBlur(FocusEventArgs e)
    {
        try
        {
            ALL135 = 0;
            ALL246 = 0;
            ALL = 0;
            foreach (var item in userTotals)
            {
                // 检查 Order 是否是 "1" 到 "6" 之间的字符串
                if (item.Order != "1" && item.Order != "2" && item.Order != "3" &&
                    item.Order != "4" && item.Order != "5" && item.Order != "6")
                {
                    // 如果不是，将其设置为空字符串
                    item.Order = string.Empty;
                }

                if (item.Order.Trim() == "1" || item.Order.Trim() == "3" || item.Order.Trim() == "5")
                {
                    decimal amount = 0;
                    _ =decimal.TryParse(item.Amount,out amount);
                    ALL135 += amount;
                }
                else if (item.Order.Trim() == "2" || item.Order.Trim() == "4" || item.Order.Trim() == "6")
                {
                    decimal amount = 0;
                    _ = decimal.TryParse(item.Amount, out amount);
                    ALL246 += amount;
                }

                Difference = ALL135 - ALL246;
                ALL += decimal.Parse(item.Total.ToString());
                item.IsEditable2 = false;
            }
            ChangeSettlementControl();
            await DbService.SaveDataWithTransactionAsync(userTotals, new List<ModificationRecord>());
            StateHasChanged(); // 强制组件重新渲染
        }
        catch (Exception ex)
        {
            // 记录错误日志
            Console.WriteLine($"Exception in SaveData: {ex.Message}");
            // 可以考虑展示用户友好的错误信息
        }
    }

    private async void AddNewRow()
    {
        await Task.Delay(1000);
        userTotals.Add(new UserTotal
            {
                Username = string.Empty,
                Order = string.Empty,
                Amount = string.Empty,
                Settlement = string.Empty,
                Total = 0
            });
        userTotals.Add(new UserTotal
            {
                Username = string.Empty,
                Order = string.Empty,
                Amount = string.Empty,
                Settlement = string.Empty,
                Total = 0
            });
    }
    private async Task DeleteRow(UserTotal item)
    {
        string v = $"确认删除用户 {item.Username} 吗?";
        bool confirmed = await JS.InvokeAsync<bool>("confirm", v);
        if (confirmed)
        {
            userTotals.Remove(item);

            userTotals.Add(new UserTotal
                {
                    Username = string.Empty,
                    Order = string.Empty,
                    Amount = string.Empty,
                    Settlement = string.Empty,
                    Total = 0
                });

            await DbService.DeleteUserTotalAsync(item);
        }

    }

    private void ChangeSettlementControl()
    {
        foreach (var item in userTotals)
        {
            // 检查 SettlementControl 是否是 "1"、"3" 或 "5"
            if (SettlementControl.Trim() == "1" || SettlementControl.Trim() == "3" || SettlementControl.Trim() == "5")
            {
                // 检查 item.Settlement 是否是 "1"、"3" 或 "5"
                if (item.Order.Trim() == "1" || item.Order.Trim() == "3" || item.Order.Trim() == "5")
                {
                    try
                    {
                        // 将 item.Settlement 变成正数
                        item.Settlement = Math.Abs(decimal.Parse(item.Amount)).ToString();
                    }
                    catch (Exception e)
                    {

                    }

                }
                else
                {
                    try
                    {
                        // 将 item.Settlement 变成负数
                        item.Settlement = (-Math.Abs(decimal.Parse(item.Amount))).ToString();
                        item.IsEditable1 = false;
                    }
                    catch (Exception e)
                    {

                    }
                }
            }
            // 处理其他情况，如 SettlementControl 是 "2"、"4" 或 "6"
            else if (SettlementControl.Trim() == "2" || SettlementControl.Trim() == "4" || SettlementControl.Trim() == "6")
            {
                if (item.Order.Trim() == "1" || item.Order.Trim() == "3" || item.Order.Trim() == "5")
                {
                    try
                    {
                        item.Settlement = (-Math.Abs(decimal.Parse(item.Amount))).ToString();
                        item.IsEditable1 = false;
                    }
                    catch (Exception e)
                    {

                    }

                }
                else
                {
                    try
                    {
                        item.Settlement = (Math.Abs(decimal.Parse(item.Amount))).ToString();
                    }
                    catch (Exception e)
                    {

                    }


                }
            }
        }
        SettlementControl = string.Empty;
    }
}
